version: '3.8'

services:


    nginx:
      image: nginx
      ports:
        - 80:80
      volumes:
        - type: bind
          source: ./nginx.conf
          target: /etc/nginx/nginx.conf
      depends_on:
        - example-frontend
        - example-backend


    example-frontend:
      image: example-frontend:latest
      container_name: example-frontend
      build: ./example-frontend
      #ports:
      #  - 5000:5000


    example-backend:
      image: example-backend:latest
      container_name: example-backend
      build: ./example-backend
      #ports:
      #  - 8080:8080
      environment:    # --> This tells backend service to connect to Redis & Postgres
        - REDIS_HOST=redis
        - POSTGRES_HOST=postgres
        - POSTGRES_USER=${POSTGRES_USER}          # --> will be replaced with the corresponding
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  #     values defined in the postgres service
        - POSTGRES_DATABASE=${POSTGRES_DB}        #     environment
      depends_on:     # --> Ensure that redis & postgres start before the backend
        - redis
        - postgres

    
    redis:
      image: redis

    
    postgres:
      image: postgres
      restart: unless-stopped
      environment:
        - POSTGRES_USER=postgres               # Default
        - POSTGRES_PASSWORD=postgres           # Default
        - POSTGRES_DB=postgres                 # Default
      volumes:
        - type: bind
          source: ./database
          target: /var/lib/postgresql/data # --> where postgres (by default) will write the data
          bind:
            create_host_path: true         # --> Create "database" folder if it doesn't exist


# Run:
# docker compose up
#   - Port scan: docker run -it --rm --network host networkstatic/nmap localhost
#   - Clean containers: docker container prune 
#   - Clean volumes: docker volume prune


# 1) Remove the port mapping for the frontend and backend services.
#    Since they will be accessed through the reverse proxy, there's
#    no need to expose their ports directly.

# With these changes, the frontend and backend services will not be
# directly accessible from outside the network created by Docker Compose.
# Requests to http://localhost:5000 will go through the reverse proxy (nginx)
# and be forwarded to the frontend service. Similarly, requests to 
# http://localhost/api will be forwarded to the backend service.

