version: '3.8'

services:

    example-frontend:
      image: example-frontend:latest
      container_name: example-frontend
      build: ./example-frontend
      ports:
        - 5000:5000

    example-backend:
      image: example-backend:latest
      container_name: example-backend
      build: ./example-backend
      ports:
        - 8080:8080
      environment:    # --> This tells backend service to connect to Redis & Postgres
        - REDIS_HOST=redis
        - POSTGRES_HOST=postgres
        - POSTGRES_USER=${POSTGRES_USER}          # --> will be replaced with the corresponding
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  #     values defined in the postgres service
        - POSTGRES_DATABASE=${POSTGRES_DB}        #     environment
      depends_on:     # --> Ensure that redis & postgres start before the backend
        - redis
        - postgres
    
    redis:
      image: redis
    
    postgres:
      image: postgres
      restart: unless-stopped
      environment:
        - POSTGRES_USER=postgres               # Default
        - POSTGRES_PASSWORD=postgres           # Default
        - POSTGRES_DB=postgres                 # Default
      volumes:
        - type: bind
          source: ./database
          target: /var/lib/postgresql/data # --> where postgres (by default) will write the data
          bind:
            create_host_path: true         # --> Create "database" folder if it doesn't exist

# Run:
# docker compose up
#   - Go to "http://localhost:5000"
#   - Press button of Exercise 2.6 
#   - Save a few messages through the frontend
#   - Run: docker compose down
#   - Run: docker compose up (messages are available after refreshing browser)
#   - Run: docker compose down (and delete the volume folder manually)
#   - Run: docker compose up (and the data should be gone)
#   - Clean containers: docker container prune 
#   - Clean volumes: docker volume prune

